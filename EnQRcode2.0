import os
import time
import sys
from PIL import Image
import qrcode
from pyzbar import pyzbar as pyzbar
from ffmpy3 import FFmpeg
import cv2
import numpy as np
def str2bin(s):
    temp=[]
    for c in s:
        temp.append(bin(c).replace('0b',''))
    str_bin=' '.join(temp)
    return str_bin
def newQrcode(size,cube):#初始化二维码（一个一个打出来的，三个定位点

     # location point size定位点尺寸
     # print((lpsize*6)/7)
     #用参数表示每个边的坐标
    lpsize = cube * 8  # 定位点尺寸 8的倍数
    img = np.ones((size, size), dtype=np.uint8)
    img[0:int(lpsize), 0:int(lpsize)] = 255
    img[0:int(lpsize*7/8), 0:int(lpsize*7/8)] = 0
    img[int(lpsize/8):int(lpsize*6/8), int(lpsize/8):int(lpsize*6/8)] = 255
    img[int(lpsize*2/8):int(lpsize*5/8), int(lpsize*2/8):int(lpsize*5/8)] = 0
    #左上角
    img[size-int(lpsize):size,0:int(lpsize)] = 255
    img[size-int(lpsize*7/8):size,0:int(lpsize*7/8)] = 0
    img[size-int(lpsize*6/8):size-int(lpsize/8),int(lpsize/8):int(lpsize*6/8)] = 255
    img[size-int(lpsize*5/8):size-int(lpsize*2/8),int(lpsize*2/8):int(lpsize*5/8)] = 0
     #左下角

    img[0:int(lpsize), size-int(lpsize):size] = 255
    img[0:int(lpsize*7/8), size-int(lpsize*7/8):size] = 0
    img[int(lpsize/8):int(lpsize*6/8), size - int(lpsize * 6 / 8):size - int(lpsize / 8)] = 255
    img[int(lpsize*2/8):int(lpsize*5/8), size-int(lpsize*5/8):size-int(lpsize*2/8)] = 0
     #右上角
    return img
def encode(size,cube):
    file=open(r'C:/Users/77443/Desktop/project1.1/test.txt','rb')
    str1=file.read()
    print(str1)
    str2 = str2bin(str1)
    size=512   #图片尺寸
    cube = 16  # 每个单元的大小
    lpsize=cube*8  #定位点尺寸 8的倍数
    countx=0
    county=lpsize
    QR_number=1
    QR_print_number=0
    img = newQrcode(size,lpsize)
    for c in str1:
        b=bin(c).replace('0b','')
        b=b.rjust(8,'0')
        for b1 in b:
            if countx == size:
                QR_number += 1
                county = lpsize
                countx=0
            if b1 =='0':img[countx:countx+cube,county:county+cube]=255     #16*16的小方格视为为一个单位
            else :
                img[countx:countx+cube,county:county+cube]=0            #0白1黑
            county+=cube
            #按照区域对于county如何变化分类讨论
            if county == size-lpsize and countx<lpsize-cube:
                county=lpsize
                countx += cube  # 到达下一行
            elif county==size-lpsize and countx==lpsize-cube:
                county=0
                countx+=cube
            elif county==size and countx<size-lpsize-cube:
                county=0
                countx+=cube
            elif county==size and countx==size-lpsize-cube:
                county=lpsize
                countx+=cube
            elif county==size and countx>=size-lpsize:
                county=lpsize
                countx+=cube
            if countx==size and county==size:
                cv2.imwrite(r'C:/Users/77443/Desktop/project1.1/project1pic/' + str(QR_number) + '.png', img)
                QR_print_number+=1
                img = newQrcode(512,128);
        if QR_print_number<QR_number:#判断此时是否需要再将图片打印出来
            cv2.imwrite(r'C:/Users/77443/Desktop/project1.1/project1pic/' + str(QR_number) + '.png', img)

def decode(size,cube):
    img = cv2.imread(r'C:/Users/77443/Desktop/project1.1/project1outpic/1.png')
    pic_number = 1
    lpsize=cube*8
    cube=16
    countx = 0
    county = lpsize
    bin1 = ''
    bin_number = 0
    str1 = ""
    while countx < size:
        if np.sum(img[countx:countx + cube, county:county + cube]) < 32640:  # 这里相当于是取小像素块的平均值，考虑到后面手机拍摄可能会产生色差
            bin1 = bin1 + '1'
        else:
            bin1 = bin1 + '0'
        bin_number += 1
        # print(bin1)
        if bin_number == 8:
            #bin1 = bin1 + " "
            bin_number = 0
        countx += cube
        #这一块的分类讨论和encode是一样的
        if county == size - lpsize and countx < lpsize - cube:
            county = lpsize
            countx += cube  # 到达下一行
        elif county == size - lpsize and countx == lpsize - cube:
            county = 0
            countx += cube
        elif county == size and countx < size - lpsize - cube:
            county = 0
            countx += cube
        elif county == size and countx == size - lpsize - cube:
            county = lpsize
            countx += cube
        elif county == size and countx >= size - lpsize:
            county = lpsize
            countx += cube
        if countx == size and county == size:
            pic_number += 1
            img = cv2.imread(r'C:/Users/77443/Desktop/project1.1/project1outpic/' + str(
                    pic_number) + '.png')  # 这一段可读性太差，意思是取完全部的图（但不知道为啥林晖的那部分代码在我电脑上跑不动所以改了一下，感觉林晖那个更好
            # print(type(img))
            # print(pic_number)
            if type(img) != type(None):
                county = lpsize
            else:
                countx=520
    print(bintostr(bin1))

def bintostr(s):
    count = 0
    sum = 0
    outStr = ''
    for i in s:
        temp = (ord(i)-ord("0")) * pow(2, 7 - count)
        sum += temp
        count += 1
        if (count == 8):
            count = 0

            if(sum==255):
                return outStr
            outStr = outStr + (chr(sum))
            sum = 0

        #print(outStr)
    return outStr

    '''
    save_dir = save_file_dir + "/" + s + '.png'
    img.fill(128)
    cv2.imwrite(save_dir, img)
    img = np.zeros((530, 530, 3), np.uint8)
    img.fill(128)
    count+=1
    s = str(count)
    save_dir = save_file_dir + "/" + s + '.png'
    cv2.imwrite(save_dir, img)
    for i in str1:
        if i=='1':
            img=np.zeros((530,530,3),np.uint8)
            img.fill(255)
            count+=1
            s = str(count)
            save_dir = save_file_dir + "/" + s + '.png'
            cv2.imwrite(save_dir,img)
        elif i=='0':
            img = np.zeros((530, 530, 3), np.uint8)
            img.fill(0)
            count+=1
            s = str(count)
            save_dir = save_file_dir + "/" + s + '.png'
            cv2.imwrite(save_dir, img)
        else:continue
    s = str(count)
    save_dir = save_file_dir + "/" + s + '.png'
    img = np.zeros((530, 530, 3), np.uint8)
    img.fill(128)
    cv2.imwrite(save_dir, img)
    img = np.zeros((530, 530, 3), np.uint8)
    img.fill(128)
    count+=1
    s = str(count)
    save_dir = save_file_dir + "/" + s + '.png'
    cv2.imwrite(save_dir, img)
def decodebin(decode_img_path):
    image=cv2.imread(decode_img_path)
    a=(b,g,r)=cv2.split(image)
    if a[0][0][0] ==255:
        return '1'
    elif a[0][0][0]==0:
        return '0'
def bintostr(s):
    bin_str=''.join([chr(i) for i in [int(b,2) for b in s.split(' ')]])
    return bin_str
    '''



if __name__ == "__main__":
    encode(512,16) #图片尺寸512*512 每一个小方块尺寸是16*16
    ffin = FFmpeg(inputs={'': '-f image2 -r 5 -i C:/Users/77443/Desktop/project1.1/project1pic/%d.png -y'}, outputs={'test.mp4': None})
    ffin.run()
    ffout = FFmpeg(inputs={'': '-i test.mp4 -r 5 -f image2 %d.png -y'}, outputs={'C:/Users/77443/Desktop/project1.1/project1outpic/%d.png': None})
    ffout.run()
    decode(512,16)


'''
  decode_dir=r'C:/Users/77443/Desktop/project1.1/project1outpic'
    outstr=[]
    bitcount=0
    count = 3
    #print(decodebin(r'/Users/xianfu/PycharmProjects/project1.1/project1outpic/1.png'))
for file in os.listdir(decode_dir):
         file_name=decode_dir+"/"+str(count)+".png"
         if bitcount==7 :outstr.append(' ')
         ch=decode(file_name)
         outstr.append(ch)
         bitcount+=1
         count+=1
    print(outstr)
    strout=''.join(outstr[2:])
    strout=bintostr(strout)
    print(strout)
'''
